const express = require('express');
const cors = require('cors');
const axios = require('axios');
const cheerio = require('cheerio');

const app = express();
const PORT = 5000;

// Middleware
app.use(cors());
app.use(express.json());

// Danh s√°ch c√°c ngu·ªìn tin t·ª©c v·ªõi selector ƒë∆∞·ª£c c·∫£i ti·∫øn
const newsSources = [
    {
        name: 'VnExpress S·ª©c kh·ªèe',
        url: 'https://vnexpress.net/suc-khoe',
        selector: {
            articles: '.item-news',
            title: '.title-news a',
            link: '.title-news a',
            summary: '.description',
            image: '.thumb-art img',
            category: 'Ph·∫´u thu·∫≠t'
        },
        imageSelectors: [
            '.thumb-art img',
            '.item-news img',
            '.news-item img',
            '.pic img'
        ]
    },
    {
        name: 'Tu·ªïi Tr·∫ª S·ª©c kh·ªèe',
        url: 'https://tuoitre.vn/suc-khoe.htm',
        selector: {
            articles: '.box-category-item',
            title: '.box-title-text a',
            link: '.box-title-text a',
            summary: '.sapo',
            image: '.box-category-avatar img',
            category: 'Ung th∆∞'
        },
        imageSelectors: [
            '.box-category-avatar img',
            '.box-category-item img',
            '.item-thumb img',
            '.box-photo img'
        ]
    },
    {
        name: 'B√°o S·ª©c kh·ªèe ƒê·ªùi s·ªëng',
        url: 'https://suckhoedoisong.vn/',
        selector: {
            articles: '.story',
            title: '.story__title a',
            link: '.story__title a',
            summary: '.story__summary',
            image: '.story__thumb img',
            category: 'S·∫£n khoa'
        },
        imageSelectors: [
            '.story__thumb img',
            '.story img',
            '.item-photo img',
            '.story-image img'
        ]
    },
    {
        name: 'B√°o D√¢n tr√≠ S·ª©c kh·ªèe',
        url: 'https://dantri.com.vn/suc-khoe.htm',
        selector: {
            articles: '.news-item',
            title: '.news-item__title a',
            link: '.news-item__title a',
            summary: '.news-item__sapo',
            image: '.news-item__avatar img',
            category: 'Nhi khoa'
        },
        imageSelectors: [
            '.news-item__avatar img',
            '.news-item img',
            '.article-thumb img',
            '.dt-thumbnail img'
        ]
    },
    {
        name: 'B√°o Thanh ni√™n S·ª©c kh·ªèe',
        url: 'https://thanhnien.vn/suc-khoe/',
        selector: {
            articles: '.story',
            title: '.story__title a',
            link: '.story__title a',
            summary: '.story__summary',
            image: '.story__thumb img',
            category: 'Tim m·∫°ch'
        },
        imageSelectors: [
            '.story__thumb img',
            '.story img',
            '.cms-photo img',
            '.story-photo img'
        ]
    }
];

// Cache ƒë·ªÉ l∆∞u n·ªôi dung ƒë√£ scrape
const contentCache = new Map();
const CACHE_DURATION = 30 * 60 * 1000; // 30 ph√∫t

// Cache to√†n c·ª•c cho articles
const articlesCache = new Map();
const ARTICLES_CACHE_DURATION = 10 * 60 * 1000; // 10 ph√∫t

// Function ƒë·ªÉ l·∫•y ho·∫∑c refresh cache articles
async function getCachedArticles() {
    const cached = articlesCache.get('all_articles');

    if (cached && Date.now() - cached.timestamp < ARTICLES_CACHE_DURATION) {
        console.log('üì¶ S·ª≠ d·ª•ng cache articles');
        return cached.data;
    }

    console.log('üîÑ Refresh cache articles');
    const newsPromises = newsSources.map(source => scrapeNews(source));
    const newsResults = await Promise.all(newsPromises);
    const allArticles = newsResults.flat();

    // L∆∞u v√†o cache
    articlesCache.set('all_articles', {
        data: allArticles,
        timestamp: Date.now()
    });

    return allArticles;
}

// Function ƒë·ªÉ scrape n·ªôi dung chi ti·∫øt t·ª´ m·ªôt URL
async function scrapeArticleContent(url) {
    try {
        // Ki·ªÉm tra cache tr∆∞·ªõc
        const cached = contentCache.get(url);
        if (cached && Date.now() - cached.timestamp < CACHE_DURATION) {
            console.log(`üì¶ S·ª≠ d·ª•ng cache cho: ${url}`);
            return cached.data;
        }

        console.log(`üìÑ ƒêang l·∫•y n·ªôi dung chi ti·∫øt t·ª´: ${url}`);

        const response = await axios.get(url, {
            headers: {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
                'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
                'Accept-Language': 'vi-VN,vi;q=0.9,en;q=0.8',
                'Accept-Encoding': 'gzip, deflate, br',
                'DNT': '1',
                'Connection': 'keep-alive',
                'Upgrade-Insecure-Requests': '1'
            },
            timeout: 15000,
            maxRedirects: 5
        });

        const $ = cheerio.load(response.data);
        let content = '';
        let author = '';
        let publishDate = '';
        let mainImage = '';

        // L·∫•y h√¨nh ·∫£nh ch√≠nh v·ªõi nhi·ªÅu selector
        const imageSelectors = [
            'meta[property="og:image"]',
            'meta[name="twitter:image"]',
            '.article-image img',
            '.story-image img',
            '.news-image img',
            '.detail-image img',
            '.featured-image img',
            '.fck_detail img:first-child',
            '.detail-content img:first-child',
            '.content-detail img:first-child',
            '.article-body img:first-child',
            '.post-content img:first-child'
        ];

        for (const selector of imageSelectors) {
            let element;
            if (selector.includes('meta')) {
                element = $(selector);
                if (element.length > 0) {
                    mainImage = element.attr('content');
                    if (mainImage && mainImage.startsWith('http')) {
                        console.log(`üñºÔ∏è  T√¨m th·∫•y ·∫£nh t·ª´ meta: ${mainImage}`);
                        break;
                    }
                }
            } else {
                element = $(selector);
                if (element.length > 0) {
                    mainImage = element.attr('src') || element.attr('data-src') || element.attr('data-lazy-src');
                    if (mainImage) {
                        if (!mainImage.startsWith('http')) {
                            const baseUrl = new URL(url).origin;
                            mainImage = mainImage.startsWith('/') ? `${baseUrl}${mainImage}` : `${baseUrl}/${mainImage}`;
                        }
                        console.log(`üñºÔ∏è  T√¨m th·∫•y ·∫£nh t·ª´ content: ${mainImage}`);
                        break;
                    }
                }
            }
        }

        // L·∫•y n·ªôi dung v·ªõi nhi·ªÅu selector cho t·ª´ng trang b√°o
        const contentSelectors = [
            // VnExpress
            '.fck_detail',
            '.Normal',
            // Tu·ªïi Tr·∫ª
            '.detail-content',
            '.content',
            '.article-content',
            // D√¢n Tr√≠
            '.dt-news__content',
            '.news-content',
            // Thanh Ni√™n
            '.story-content',
            '.cms-body',
            // S·ª©c kh·ªèe ƒê·ªùi s·ªëng
            '.content-detail',
            '.article-body',
            // Fallback selectors
            '.post-content',
            '.entry-content',
            '.main-content',
            '.article p',
            'article .content p'
        ];

        // T√¨m n·ªôi dung
        for (const selector of contentSelectors) {
            const element = $(selector);
            if (element.length > 0) {
                let rawContent = element.html();
                if (rawContent && rawContent.trim().length > 100) {
                    content = rawContent;
                    console.log(`üìù T√¨m th·∫•y n·ªôi dung t·ª´: ${selector} (${rawContent.length} k√Ω t·ª±)`);
                    break;
                }
            }
        }

        // T√¨m t√°c gi·∫£ v·ªõi nhi·ªÅu selector
        const authorSelectors = [
            '.author-info .name',
            '.author-name',
            '.author',
            '.byline',
            '.writer',
            '.article-author',
            '.post-author',
            '.writer-name',
            '.author-signature'
        ];

        for (const selector of authorSelectors) {
            const element = $(selector);
            if (element.length > 0) {
                author = element.text().trim();
                if (author && author.length > 2) {
                    console.log(`üë§ T√¨m th·∫•y t√°c gi·∫£: ${author}`);
                    break;
                }
            }
        }

        // T√¨m ng√†y xu·∫•t b·∫£n
        const dateSelectors = [
            '.date-time',
            '.publish-date',
            '.date-publish',
            '.post-date',
            '.article-date',
            '.news-date',
            '.time-publish',
            'time',
            '.published-time'
        ];

        for (const selector of dateSelectors) {
            const element = $(selector);
            if (element.length > 0) {
                publishDate = element.text().trim() || element.attr('datetime');
                if (publishDate && publishDate.length > 5) {
                    console.log(`üìÖ T√¨m th·∫•y ng√†y: ${publishDate}`);
                    break;
                }
            }
        }

        // L√†m s·∫°ch v√† c·∫£i thi·ªán n·ªôi dung
        if (content) {
            content = content
                // X√≥a c√°c th·∫ª kh√¥ng c·∫ßn thi·∫øt
                .replace(/<script[^>]*>[\s\S]*?<\/script>/gi, '')
                .replace(/<style[^>]*>[\s\S]*?<\/style>/gi, '')
                .replace(/<iframe[^>]*>[\s\S]*?<\/iframe>/gi, '')
                .replace(/<!--[\s\S]*?-->/g, '')
                .replace(/<noscript[^>]*>[\s\S]*?<\/noscript>/gi, '')
                // X√≥a c√°c div qu·∫£ng c√°o
                .replace(/<div[^>]*class="[^"]*ad[^"]*"[^>]*>[\s\S]*?<\/div>/gi, '')
                .replace(/<div[^>]*class="[^"]*banner[^"]*"[^>]*>[\s\S]*?<\/div>/gi, '')
                // C·∫£i thi·ªán h√¨nh ·∫£nh
                .replace(/<img([^>]*)src="([^"]*)"([^>]*)>/gi, (match, before, src, after) => {
                    if (!src.startsWith('http') && !src.startsWith('data:')) {
                        const baseUrl = new URL(url).origin;
                        src = src.startsWith('/') ? `${baseUrl}${src}` : `${baseUrl}/${src}`;
                    }
                    return `<img${before}src="${src}"${after} style="max-width: 100%; height: auto; margin: 15px 0; border-radius: 8px; box-shadow: 0 2px 8px rgba(0,0,0,0.1);">`;
                })
                // C·∫£i thi·ªán ƒëo·∫°n vƒÉn
                .replace(/<p([^>]*)>/gi, '<p$1 style="margin-bottom: 15px; line-height: 1.6; text-align: justify;">')
                // C·∫£i thi·ªán ti√™u ƒë·ªÅ
                .replace(/<h([1-6])([^>]*)>/gi, '<h$1$2 style="margin: 20px 0 15px 0; color: #2c3e50; font-weight: bold;">')
                // C·∫£i thi·ªán danh s√°ch
                .replace(/<ul([^>]*)>/gi, '<ul$1 style="margin: 15px 0; padding-left: 25px;">')
                .replace(/<ol([^>]*)>/gi, '<ol$1 style="margin: 15px 0; padding-left: 25px;">')
                .replace(/<li([^>]*)>/gi, '<li$1 style="margin-bottom: 8px; line-height: 1.5;">')
                .trim();

            // Wrap n·ªôi dung trong container
            content = `
                <div class="article-content" style="font-family: 'Segoe UI', Arial, sans-serif; color: #333; line-height: 1.6;">
                    ${content}
                </div>
            `;
        }

        const result = {
            content: content || '<p style="color: #666; font-style: italic;">Kh√¥ng th·ªÉ t·∫£i n·ªôi dung chi ti·∫øt. Vui l√≤ng truy c·∫≠p link g·ªëc ƒë·ªÉ xem ƒë·∫ßy ƒë·ªß.</p>',
            author: author || 'Bi√™n t·∫≠p vi√™n',
            publishDate: formatPublishDate(publishDate) || new Date().toISOString().split('T')[0],
            mainImage: mainImage || null
        };

        // L∆∞u v√†o cache
        contentCache.set(url, {
            data: result,
            timestamp: Date.now()
        });

        console.log(`‚úÖ Scrape th√†nh c√¥ng: ${url}`);
        return result;

    } catch (error) {
        console.error(`‚ùå L·ªói khi l·∫•y n·ªôi dung t·ª´ ${url}:`, error.message);
        return {
            content: '<p style="color: #666; font-style: italic;">Kh√¥ng th·ªÉ t·∫£i n·ªôi dung chi ti·∫øt. Vui l√≤ng truy c·∫≠p link g·ªëc ƒë·ªÉ xem ƒë·∫ßy ƒë·ªß.</p>',
            author: 'Bi√™n t·∫≠p vi√™n',
            publishDate: new Date().toISOString().split('T')[0],
            mainImage: null
        };
    }
}

// Function ƒë·ªÉ format ng√†y xu·∫•t b·∫£n
function formatPublishDate(dateString) {
    if (!dateString) return null;

    try {
        // X·ª≠ l√Ω c√°c format ng√†y ph·ªï bi·∫øn
        let date = new Date(dateString);

        // N·∫øu kh√¥ng parse ƒë∆∞·ª£c, th·ª≠ c√°c format kh√°c
        if (isNaN(date.getTime())) {
            // Format: "Th·ª© 2, 7/7/2025, 10:30"
            const match = dateString.match(/(\d{1,2})\/(\d{1,2})\/(\d{4})/);
            if (match) {
                date = new Date(match[3], match[2] - 1, match[1]);
            }
        }

        if (!isNaN(date.getTime())) {
            return date.toISOString().split('T')[0];
        }

        return new Date().toISOString().split('T')[0];
    } catch (error) {
        return new Date().toISOString().split('T')[0];
    }
}

// Function ƒë·ªÉ l·∫•y h√¨nh ·∫£nh t·ª´ element (gi·ªØ nguy√™n nh∆∞ c≈©)
function extractImageFromElement($element, source) {
    let image = null;

    for (const imgSelector of source.imageSelectors) {
        const imgElement = $element.find(imgSelector);
        if (imgElement.length > 0) {
            image = imgElement.attr('src') ||
                imgElement.attr('data-src') ||
                imgElement.attr('data-lazy-src') ||
                imgElement.attr('data-original') ||
                imgElement.attr('data-url') ||
                imgElement.attr('data-thumb');

            if (image && image.length > 10 &&
                !image.includes('placeholder') &&
                !image.includes('loading') &&
                !image.includes('avatar') &&
                !image.includes('icon') &&
                !image.includes('logo') &&
                !image.startsWith('data:image/svg')) {
                break;
            }
        }
    }

    return image;
}

// Function ƒë·ªÉ scrape tin t·ª©c t·ª´ m·ªôt ngu·ªìn
async function scrapeNews(source) {
    try {
        console.log(`üåê ƒêang l·∫•y tin t·ª´: ${source.name}`);

        const response = await axios.get(source.url, {
            headers: {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
            },
            timeout: 10000
        });

        const $ = cheerio.load(response.data);
        const articles = [];

        const articleElements = $(source.selector.articles).slice(0, 8);

        for (let index = 0; index < articleElements.length; index++) {
            const element = articleElements[index];
            const $element = $(element);

            const title = $element.find(source.selector.title).text().trim();
            const link = $element.find(source.selector.link).attr('href');
            const summary = $element.find(source.selector.summary).text().trim();

            if (title && link) {
                const fullLink = link.startsWith('http') ? link : `${new URL(source.url).origin}${link}`;

                let image = extractImageFromElement($element, source);

                if (image && !image.startsWith('http')) {
                    const baseUrl = new URL(source.url).origin;
                    image = image.startsWith('/') ? `${baseUrl}${image}` : `${baseUrl}/${image}`;
                }

                // T·∫†O ID D·∫†NG STRING ƒê·ªÇ D·ªÑ PH√ÇN BI·ªÜT
                const articleId = `${source.name.toLowerCase().replace(/\s+/g, '-')}-${Date.now()}-${index}`;

                const article = {
                    id: articleId, // ID string format
                    title: title,
                    summary: summary || 'N·ªôi dung s·∫Ω ƒë∆∞·ª£c c·∫≠p nh·∫≠t...',
                    link: fullLink,
                    image: image,
                    category: source.selector.category,
                    source: source.name,
                    publishDate: new Date().toISOString().split('T')[0],
                    isHighlight: index === 0 && source.name === 'VnExpress S·ª©c kh·ªèe',
                    readTime: `${Math.floor(Math.random() * 5) + 3} ph√∫t ƒë·ªçc`,
                    views: Math.floor(Math.random() * 1000) + 100,
                    likes: Math.floor(Math.random() * 100) + 10,
                    tags: ['y t·∫ø', 's·ª©c kh·ªèe', 'tin t·ª©c'],
                    hasRealContent: true,
                    originalUrl: fullLink,
                    // Th√™m content ngay t·ª´ ƒë·∫ßu ƒë·ªÉ tr√°nh ph·∫£i scrape l·∫°i
                    content: '<p>ƒêang t·∫£i n·ªôi dung chi ti·∫øt...</p>',
                    author: 'Bi√™n t·∫≠p vi√™n'
                };

                articles.push(article);
                console.log(`üìù T·∫°o b√†i vi·∫øt ID: ${articleId} - ${title.substring(0, 50)}...`);
            }
        }

        console.log(`‚úÖ L·∫•y ƒë∆∞·ª£c ${articles.length} b√†i t·ª´ ${source.name}`);
        return articles;

    } catch (error) {
        console.error(`‚ùå L·ªói khi l·∫•y tin t·ª´ ${source.name}:`, error.message);
        return [];
    }
}

// API endpoint ƒë·ªÉ l·∫•y tin t·ª©c v·ªõi n·ªôi dung ƒë·∫ßy ƒë·ªß
app.get('/api/news/full', async (req, res) => {
    try {
        const page = parseInt(req.query.page) || 1;
        const limit = parseInt(req.query.limit) || 10;

        console.log(`üì∞ L·∫•y tin t·ª©c ƒë·∫ßy ƒë·ªß - Trang ${page}, Limit ${limit}`);

        const allArticles = await getCachedArticles();
        const newsToProcess = allArticles.slice(0, limit);

        const detailedNews = [];

        for (const article of newsToProcess) {
            try {
                console.log(`üìÑ L·∫•y chi ti·∫øt cho: ${article.title.substring(0, 30)}...`);
                const articleContent = await scrapeArticleContent(article.originalUrl || article.link);

                detailedNews.push({
                    ...article,
                    content: articleContent.content,
                    author: articleContent.author || 'Bi√™n t·∫≠p vi√™n',
                    publishDate: articleContent.publishDate || article.publishDate,
                    image: articleContent.mainImage || article.image,
                    fullContent: true,
                    hasRealContent: true
                });
            } catch (error) {
                console.error(`‚ùå L·ªói chi ti·∫øt cho b√†i vi·∫øt ${article.id}:`, error);
                detailedNews.push({
                    ...article,
                    content: '<p>Kh√¥ng th·ªÉ t·∫£i n·ªôi dung chi ti·∫øt. Vui l√≤ng truy c·∫≠p link g·ªëc.</p>',
                    fullContent: false
                });
            }
        }

        res.json({
            success: true,
            data: detailedNews,
            pagination: {
                page: page,
                limit: limit,
                total: allArticles.length,
                hasNext: allArticles.length > limit,
                hasPrev: page > 1
            },
            lastUpdated: new Date().toISOString(),
            source: 'Real scraping - No mock data'
        });

    } catch (error) {
        console.error('‚ùå L·ªói khi l·∫•y tin t·ª©c ƒë·∫ßy ƒë·ªß:', error);
        res.status(500).json({
            success: false,
            error: 'Kh√¥ng th·ªÉ l·∫•y tin t·ª©c ƒë·∫ßy ƒë·ªß',
            message: error.message
        });
    }
});

// API endpoint ƒë·ªÉ l·∫•y chi ti·∫øt m·ªôt b√†i vi·∫øt
app.get('/api/news/:id', async (req, res) => {
    try {
        const { id } = req.params;
        console.log(`üîç T√¨m ki·∫øm b√†i vi·∫øt v·ªõi ID: ${id}`);

        // L·∫•y articles t·ª´ cache
        const allArticles = await getCachedArticles();

        // T√¨m b√†i vi·∫øt theo ID - h·ªó tr·ª£ nhi·ªÅu format
        const article = allArticles.find(item => {
            // So s√°nh exact match
            if (item.id === id) return true;
            // So s√°nh string
            if (item.id.toString() === id.toString()) return true;
            // So s√°nh number
            if (parseInt(item.id) === parseInt(id)) return true;
            return false;
        });

        if (!article) {
            console.log(`‚ùå Kh√¥ng t√¨m th·∫•y b√†i vi·∫øt v·ªõi ID: ${id}`);
            console.log(`üìã C√°c ID c√≥ s·∫µn:`, allArticles.slice(0, 10).map(item => ({
                id: item.id,
                title: item.title.substring(0, 50) + '...',
                source: item.source
            })));

            return res.status(404).json({
                success: false,
                message: 'Kh√¥ng t√¨m th·∫•y b√†i vi·∫øt',
                debug: {
                    searchedId: id,
                    searchedIdType: typeof id,
                    availableIds: allArticles.slice(0, 10).map(item => ({
                        id: item.id,
                        idType: typeof item.id,
                        title: item.title.substring(0, 50) + '...',
                        source: item.source
                    }))
                }
            });
        }

        console.log(`‚úÖ T√¨m th·∫•y b√†i vi·∫øt: ${article.title}`);

        // L·∫•y n·ªôi dung chi ti·∫øt n·∫øu ch∆∞a c√≥
        let detailedContent = article.content;
        let articleAuthor = article.author;
        let articleImage = article.image;

        if (!article.fullContent || article.content === '<p>ƒêang t·∫£i n·ªôi dung chi ti·∫øt...</p>') {
            console.log(`üìÑ ƒêang scrape n·ªôi dung chi ti·∫øt cho: ${article.title.substring(0, 30)}...`);
            try {
                const articleContent = await scrapeArticleContent(article.originalUrl || article.link);
                detailedContent = articleContent.content;
                articleAuthor = articleContent.author || article.author;
                articleImage = articleContent.mainImage || article.image;
            } catch (error) {
                console.error(`‚ùå L·ªói khi scrape n·ªôi dung:`, error);
                detailedContent = `
                    <div class="article-content">
                        <p><strong>T√≥m t·∫Øt:</strong> ${article.summary}</p>
                        <p><em>Kh√¥ng th·ªÉ t·∫£i n·ªôi dung ƒë·∫ßy ƒë·ªß. Vui l√≤ng truy c·∫≠p ngu·ªìn g·ªëc ƒë·ªÉ xem chi ti·∫øt.</em></p>
                        <p><a href="${article.link}" target="_blank" rel="noopener noreferrer">üëâ ƒê·ªçc b√†i vi·∫øt g·ªëc t·∫°i ${article.source}</a></p>
                    </div>
                `;
            }
        }

        const detailedArticle = {
            ...article,
            content: detailedContent,
            author: articleAuthor,
            image: articleImage,
            fullContent: true,
            hasRealContent: true
        };

        res.json({
            success: true,
            data: detailedArticle
        });

    } catch (error) {
        console.error('‚ùå L·ªói khi l·∫•y chi ti·∫øt b√†i vi·∫øt:', error);
        res.status(500).json({
            success: false,
            message: 'L·ªói server',
            error: error.message
        });
    }
});

// API endpoint c∆° b·∫£n ƒë·ªÉ l·∫•y tin t·ª©c (kh√¥ng c√≥ n·ªôi dung chi ti·∫øt)
app.get('/api/news', async (req, res) => {
    try {
        const page = parseInt(req.query.page) || 1;
        const limit = parseInt(req.query.limit) || 10;

        console.log(`üì∞ L·∫•y tin t·ª©c c∆° b·∫£n - Trang ${page}, Limit ${limit}`);

        const allArticles = await getCachedArticles();
        const paginatedNews = allArticles.slice(0, limit);

        res.json({
            success: true,
            data: paginatedNews,
            pagination: {
                page: page,
                limit: limit,
                total: allArticles.length,
                hasNext: allArticles.length > limit,
                hasPrev: page > 1
            },
            lastUpdated: new Date().toISOString(),
            source: 'Real scraping with simple IDs'
        });

    } catch (error) {
        console.error('‚ùå L·ªói server:', error);
        res.status(500).json({
            success: false,
            error: 'Kh√¥ng th·ªÉ l·∫•y tin t·ª©c',
            message: error.message
        });
    }
});

// Health check endpoint
app.get('/api/health', (req, res) => {
    res.json({
        status: 'OK',
        message: 'Real News Scraping API ƒëang ho·∫°t ƒë·ªông',
        timestamp: new Date().toISOString(),
        cache_size: contentCache.size
    });
});

// Th√™m endpoint debug trong ServerNew.js:
app.get('/api/debug/articles', async (req, res) => {
    try {
        const allArticles = await getCachedArticles();

        res.json({
            success: true,
            total: allArticles.length,
            articles: allArticles.map(item => ({
                id: item.id,
                idType: typeof item.id,
                title: item.title.substring(0, 60) + '...',
                source: item.source,
                category: item.category,
                hasContent: !!item.content && item.content !== '<p>ƒêang t·∫£i n·ªôi dung chi ti·∫øt...</p>',
                contentLength: item.content ? item.content.length : 0
            }))
        });
    } catch (error) {
        res.status(500).json({
            success: false,
            error: error.message
        });
    }
});

// Th√™m endpoint ƒë·ªÉ force refresh cache:
app.post('/api/refresh-cache', async (req, res) => {
    try {
        console.log('üîÑ Force refresh cache...');
        articlesCache.delete('all_articles');
        contentCache.clear();

        const newArticles = await getCachedArticles();

        res.json({
            success: true,
            message: 'Cache ƒë√£ ƒë∆∞·ª£c refresh',
            totalArticles: newArticles.length,
            timestamp: new Date().toISOString()
        });
    } catch (error) {
        res.status(500).json({
            success: false,
            error: error.message
        });
    }
});

// Start server
app.listen(PORT, () => {
    console.log(`üöÄ Server ƒëang ch·∫°y t·∫°i http://localhost:${PORT}`);
    console.log(`üìã Health check: http://localhost:${PORT}/api/health`);
    console.log(`üì∞ News API: http://localhost:${PORT}/api/news`);
    console.log(`üìÑ Full News API: http://localhost:${PORT}/api/news/full`);
    console.log(`üéØ Scraping th·ª±c t·∫ø t·ª´ c√°c ngu·ªìn tin t·ª©c - Kh√¥ng c√≥ d·ªØ li·ªáu gi·∫£!`);
});